name: 📦 Build and Release

on:
  push:
    tags:
      - 'v*'  # Déclenché sur les tags de version (ex: v1.0.0, v2.1.0)

env:
  APP_NAME: "Organisateur-Photos"

jobs:
  build-windows:
    name: 🪟 Build Windows Executable
    runs-on: windows-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: 🔨 Build Executable
      run: |
        python build.py
    
    - name: 📏 Check Build Output
      run: |
        if (Test-Path "dist/${{ env.APP_NAME }}.exe") {
          $size = (Get-Item "dist/${{ env.APP_NAME }}.exe").Length / 1MB
          Write-Host "✅ Executable built successfully!"
          Write-Host "📏 Size: $([math]::Round($size, 1)) MB"
          Write-Host "📂 Location: dist/${{ env.APP_NAME }}.exe"
        } else {
          Write-Host "❌ Executable not found!"
          exit 1
        }
    
    - name: 📤 Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: windows-executable
        path: dist/${{ env.APP_NAME }}.exe
        retention-days: 7

  create-release:
    name: 🚀 Create GitHub Release
    needs: build-windows
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Récupérer tout l'historique pour le changelog
    
    - name: 📥 Download Windows Executable
      uses: actions/download-artifact@v3
      with:
        name: windows-executable
        path: ./release/
    
    - name: 📋 Generate Changelog
      id: changelog
      run: |
        # Extraire le nom de la version depuis le tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Générer un changelog basique
        echo "## 🎉 Version $VERSION" > CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### 📥 Téléchargements" >> CHANGELOG.md
        echo "- **Windows**: \`${{ env.APP_NAME }}.exe\` (Prêt à utiliser)" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### 🔧 Installation" >> CHANGELOG.md
        echo "1. Téléchargez le fichier \`.exe\`" >> CHANGELOG.md
        echo "2. Double-cliquez pour lancer l'application" >> CHANGELOG.md
        echo "3. Aucune installation requise ! 🎉" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### 📝 Changements" >> CHANGELOG.md
        
        # Récupérer les commits depuis le dernier tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -n "$PREV_TAG" ]; then
          echo "Changements depuis $PREV_TAG:" >> CHANGELOG.md
          git log --oneline --no-merges $PREV_TAG..HEAD | sed 's/^/- /' >> CHANGELOG.md
        else
          echo "- Version initiale" >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "---" >> CHANGELOG.md
        echo "💡 **Première fois ?** Consultez le [guide d'utilisation](../README.md) !" >> CHANGELOG.md
    
    - name: 🚀 Create Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.changelog.outputs.version }}
        name: "📸 Organisateur de Photos ${{ steps.changelog.outputs.version }}"
        bodyFile: CHANGELOG.md
        artifacts: "release/${{ env.APP_NAME }}.exe"
        token: ${{ secrets.GITHUB_TOKEN }}
        draft: false
        prerelease: false
        generateReleaseNotes: false
        allowUpdates: true
        artifactErrorsFailBuild: true
        
    - name: 🎉 Release Summary
      run: |
        echo "## 🎉 Release créée avec succès !" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Version**: ${{ steps.changelog.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Plateforme**: Windows (x64)" >> $GITHUB_STEP_SUMMARY
        echo "**Fichier**: ${{ env.APP_NAME }}.exe" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "🔗 [Voir la release](https://github.com/${{ github.repository }}/releases/tag/${{ steps.changelog.outputs.version }})" >> $GITHUB_STEP_SUMMARY

  # Job optionnel pour notifier en cas d'erreur
  notify-failure:
    name: 📢 Notify Failure
    needs: [build-windows, create-release]
    runs-on: ubuntu-latest
    if: failure()
    
    steps:
    - name: 📢 Failure Notification
      run: |
        echo "## ❌ Build Failed" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "La génération de la release a échoué." >> $GITHUB_STEP_SUMMARY
        echo "Vérifiez les logs des jobs précédents pour identifier le problème." >> $GITHUB_STEP_SUMMARY